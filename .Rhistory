setwd("C:/Users/Andi/repos/ProgrammingAssignment2")
getwd()
ls
ls()
source('C:/Users/Andi/Desktop/R_programming_course/Scripts/cachevector.R')
cachevector(1:16, 4, 4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1, 1, 2, 2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
cachemean(c(2, 2, 2, 2))
source('C:/Users/Andi/repos/ProgrammingAssignment2/cachematrix.R')
## This pair of functions will cache the inverse of a matrix 'x'
## The first function creates a vector that contains a list of functions
## which will be used by the 'cachesolve' funtion while calculating the inverse
## of matrix 'x'
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function will calculate the inverse of a matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
x <- matrix(1:16, 4, 4)
makeCacheMatrix(x)
cacheSolve(x)
source('C:/Users/Andi/repos/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('C:/Users/Andi/repos/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
rm(list=ls())
q()
